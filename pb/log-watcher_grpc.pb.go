// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogWatcherClient is the client API for LogWatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogWatcherClient interface {
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
}

type logWatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewLogWatcherClient(cc grpc.ClientConnInterface) LogWatcherClient {
	return &logWatcherClient{cc}
}

func (c *logWatcherClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, "/protobuf.LogWatcher/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogWatcherServer is the server API for LogWatcher service.
// All implementations must embed UnimplementedLogWatcherServer
// for forward compatibility
type LogWatcherServer interface {
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	mustEmbedUnimplementedLogWatcherServer()
}

// UnimplementedLogWatcherServer must be embedded to have forward compatible implementations.
type UnimplementedLogWatcherServer struct {
}

func (UnimplementedLogWatcherServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedLogWatcherServer) mustEmbedUnimplementedLogWatcherServer() {}

// UnsafeLogWatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogWatcherServer will
// result in compilation errors.
type UnsafeLogWatcherServer interface {
	mustEmbedUnimplementedLogWatcherServer()
}

func RegisterLogWatcherServer(s grpc.ServiceRegistrar, srv LogWatcherServer) {
	s.RegisterService(&LogWatcher_ServiceDesc, srv)
}

func _LogWatcher_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogWatcherServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.LogWatcher/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogWatcherServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogWatcher_ServiceDesc is the grpc.ServiceDesc for LogWatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogWatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.LogWatcher",
	HandlerType: (*LogWatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogs",
			Handler:    _LogWatcher_GetLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/log-watcher.proto",
}
